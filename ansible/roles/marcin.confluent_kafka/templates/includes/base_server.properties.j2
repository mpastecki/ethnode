{{ ansible_managed | comment }}

# Switch to enable topic deletion or not, default value is false
delete.topic.enable={{ kafka.broker.properties.delete_topic_enable }}

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={% for logdir in kafka.broker.properties.log_dirs %}{% if loop.index > 1%},{% endif %}{{ logdir }}{% endfor %}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka.broker.properties.num_partitions }}

# we will have 3 brokers so the default replication factor should be 2 or 3
default.replication.factor={{ kafka.broker.properties.default_replication_factor }}

# number of ISR to have in order to minimize data loss
min.insync.replicas={{ kafka.broker.properties.min_insync_replicas }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ kafka.broker.properties.num_recovery_threads_per_data_dir }}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor={{ kafka.broker.properties.offsets_topic_replication_factor }}
transaction.state.log.replication.factor={{ kafka.broker.properties.transaction_state_log_replication_factor }}
transaction.state.log.min.isr={{ kafka.broker.properties.transaction_state_log_min_isr }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The minimum age of a log file to be eligible for deletion due to age
# this will delete data after a week
log.retention.hours={{ kafka.broker.properties.log_retention_hours }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka.broker.properties.log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ kafka.broker.properties.log_retention_check_interval_ms }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={% for host in groups['zk_servers'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{ zk_port }}{% endfor %}{% if kafka.broker.zk_chroot %}/{{ kafka.broker.zk_chroot }}{% endif %}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ kafka.broker.properties.zookeeper_connection_timeout_ms }}
zookeeper.session.timeout.ms={{ kafka.broker.properties.zookeeper_session_timeout_ms }}

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms={{ kafka.broker.properties.group_initial_rebalance_delay_ms }}

############################## Confluent settings ##################################

confluent.support.metrics.enable={{ kafka.confluent_platform.confluent_metrics_enabled }}

############################## Other ##################################

auto.create.topics.enable={{ kafka.broker.properties.auto_create_topics_enable }}
background.threads={{ kafka.broker.properties.background_threads }}
message.max.bytes={{ kafka.broker.properties.message_max_bytes }}
num.io.threads={{ kafka.broker.properties.num_io_threads }}
num.network.threads={{ kafka.broker.properties.num_network_threads }}
num.recovery.threads.per.data.dir={{ kafka.broker.properties.num_recovery_threads_per_data_dir }}
num.replica.fetchers={{ kafka.broker.properties.num_replica_fetchers }}
offsets.retention.minutes={{ kafka.broker.properties.offsets_retention_minutes }}
unclean.leader.election.enable={{ kafka.broker.properties.unclean_leader_election_enable }}
broker.rack={{ kafka.broker.properties.broker_rack }}
quota.producer.default={{ kafka.broker.properties.quota_producer_default }}
quota.consumer.default={{ kafka.broker.properties.quota_consumer_default }}
socket.send.buffer.bytes={{ kafka.broker.properties.socket_send_buffer_bytes }}
socket.receive.buffer.bytes={{ kafka.broker.properties.socket_receive_buffer_bytes }}
socket.request.max.bytes={{ kafka.broker.properties.socket_request_max_bytes }}